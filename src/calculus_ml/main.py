import os
import numpy as np
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import track
from rich.tree import Tree
from rich import print as rprint

# Import core functionality
from .core.linear.regression import LinearRegression
from .core.logistic.regression import LogisticRegression

# Import examples
from .examples.linear_example import run_linear_example
from .examples.logistic_example import run_logistic_example

# Initialize rich console
console = Console()

# Dictionary qu·∫£n l√Ω h√¨nh ·∫£nh
IMAGES = {
    "Linear Regression": {
        "linear_regression_fit.png": "ƒê∆∞·ªùng h·ªìi quy tuy·∫øn t√≠nh v√† d·ªØ li·ªáu",
        "linear_cost_history.png": "L·ªãch s·ª≠ cost function c·ªßa linear regression"
    },
    "Logistic Regression": {
        "logistic_decision_boundary.png": "Decision boundary c·ªßa logistic regression",
        "logistic_cost_history.png": "L·ªãch s·ª≠ cost function c·ªßa logistic regression"
    }
}

def ensure_images_dir():
    """ƒê·∫£m b·∫£o th∆∞ m·ª•c images t·ªìn t·∫°i"""
    if not os.path.exists('images'):
        os.makedirs('images')

def print_generated_images():
    """In th√¥ng tin v·ªÅ c√°c h√¨nh ·∫£nh ƒë√£ t·∫°o"""
    tree = Tree("üìä H√¨nh ·∫£nh ƒë√£ t·∫°o")
    
    for category, images in IMAGES.items():
        category_tree = tree.add(f"üìÅ {category}")
        for img_name, description in images.items():
            img_path = os.path.join('images', img_name)
            if os.path.exists(img_path):
                size = os.path.getsize(img_path) / 1024  # Convert to KB
                category_tree.add(f"üìÑ {img_name} ({size:.1f}KB) - {description}")
            else:
                category_tree.add(f"‚ùå {img_name} (kh√¥ng t√¨m th·∫•y) - {description}")
    
    console.print("\n")
    console.print(Panel(tree, title="[bold blue]Th√¥ng tin h√¨nh ·∫£nh[/bold blue]"))
    console.print("\n")

def main():
    """H√†m main ch·∫°y t·∫•t c·∫£ c√°c v√≠ d·ª•"""
    console.print(Panel.fit(
        "[bold blue]·ª®ng D·ª•ng Gi·∫£i T√≠ch v√† H·ªçc M√°y[/bold blue]\n"
        "[italic]Minh h·ªça c√°c kh√°i ni·ªám c∆° b·∫£n trong h·ªçc m√°y[/italic]",
        border_style="blue"
    ))
    
    # Ensure images directory exists
    ensure_images_dir()
    
    # Ch·∫°y c√°c v√≠ d·ª•
    for example in track([
        run_linear_example,
        run_logistic_example
    ], description="Running examples..."):
        example()
    
    # In th√¥ng tin v·ªÅ c√°c h√¨nh ·∫£nh ƒë√£ t·∫°o
    print_generated_images()

if __name__ == "__main__":
    main() 