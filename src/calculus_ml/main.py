"""
Main script to run all examples.
"""

import os
import numpy as np
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import track
from rich.tree import Tree
from rich import print as rprint
import click

# Import core functionality
from .core.linear.regression import LinearRegression
from .core.logistic.regression import LogisticRegression

# Import examples
from .examples.linear_regression.single_linear_example import run_linear_example
from .examples.linear_regression.multiple_linear_example import run_multiple_example
from .examples.logistic_example import run_logistic_example
from .examples.polynomial_example import main as polynomial_main
from .examples.perceptron.train import train_perceptron
from .examples.single_hidden_layer.train import main as run_neural_network
from .examples.tf_one_hidden_layer.train import main as run_tf_neural_network

# Initialize rich console
console = Console()

# Dictionary qu·∫£n l√Ω h√¨nh ·∫£nh
IMAGES = {
    "Linear Regression": {
        "linear_regression_fit.png": "ƒê∆∞·ªùng h·ªìi quy tuy·∫øn t√≠nh v√† d·ªØ li·ªáu",
        "linear_cost_history.png": "L·ªãch s·ª≠ cost function c·ªßa linear regression",
        "multiple_regression_fit.png": "M·∫∑t ph·∫≥ng h·ªìi quy nhi·ªÅu bi·∫øn v√† d·ªØ li·ªáu",
        "multiple_cost_history.png": "L·ªãch s·ª≠ cost function c·ªßa h·ªìi quy nhi·ªÅu bi·∫øn",
        "gradient_descent_example.png": "Minh h·ªça qu√° tr√¨nh gradient descent"
    },
    "Polynomial Regression": {
        "polynomial_regression_fit.png": "So s√°nh c√°c m√¥ h√¨nh polynomial kh√°c b·∫≠c",
        "regularization_effect.png": "·∫¢nh h∆∞·ªüng c·ªßa regularization"
    },
    "Logistic Regression": {
        "logistic_decision_boundary.png": "Decision boundary c·ªßa logistic regression",
        "logistic_cost_history.png": "L·ªãch s·ª≠ cost function c·ªßa logistic regression"
    },
    "Perceptron": {
        "perceptron_training_history.png": "L·ªãch s·ª≠ training c·ªßa perceptron"
    },
    "Neural Network": {
        "neural_network_training_history.png": "L·ªãch s·ª≠ training c·ªßa neural network"
    },
    "TensorFlow Neural Network": {
        "tf_and_training.png": "L·ªãch s·ª≠ training c·ªßa TensorFlow neural network"
    }
}

def ensure_images_dir():
    """ƒê·∫£m b·∫£o th∆∞ m·ª•c images t·ªìn t·∫°i"""
    if not os.path.exists('images'):
        os.makedirs('images')

def print_generated_images():
    """In th√¥ng tin v·ªÅ c√°c h√¨nh ·∫£nh ƒë√£ t·∫°o"""
    tree = Tree("üìä H√¨nh ·∫£nh ƒë√£ t·∫°o")
    
    for category, images in IMAGES.items():
        category_tree = tree.add(f"üìÅ {category}")
        for img_name, description in images.items():
            img_path = os.path.join('images', img_name)
            if os.path.exists(img_path):
                size = os.path.getsize(img_path) / 1024  # Convert to KB
                category_tree.add(f"üìÑ {img_name} ({size:.1f}KB) - {description}")
            else:
                category_tree.add(f"‚ùå {img_name} (kh√¥ng t√¨m th·∫•y) - {description}")
    
    console.print("\n")
    console.print(Panel(tree, title="[bold blue]Th√¥ng tin h√¨nh ·∫£nh[/bold blue]"))
    console.print("\n")

@click.command()
@click.option('--example', type=click.Choice(['linear', 'multiple', 'polynomial', 'logistic', 'perceptron', 'neural', 'tf_neural', 'all']), 
              default='all', help='Ch·ªçn v√≠ d·ª• ƒë·ªÉ ch·∫°y')
def main(example):
    """Ch·∫°y c√°c v√≠ d·ª• v·ªÅ machine learning"""
    ensure_images_dir()
    
    if example in ['linear', 'all']:
        console.print(Panel(
            "[bold cyan]V√≠ d·ª• 1: H·ªìi quy tuy·∫øn t√≠nh ƒë∆°n gi·∫£n[/bold cyan]\n"
            "D·ª± ƒëo√°n gi√° nh√† d·ª±a tr√™n di·ªán t√≠ch",
            border_style="cyan"
        ))
        run_linear_example()
    
    if example in ['multiple', 'all']:
        console.print(Panel(
            "[bold cyan]V√≠ d·ª• 2: H·ªìi quy tuy·∫øn t√≠nh nhi·ªÅu bi·∫øn[/bold cyan]\n"
            "D·ª± ƒëo√°n gi√° nh√† d·ª±a tr√™n di·ªán t√≠ch v√† s·ªë ph√≤ng ng·ªß",
            border_style="cyan"
        ))
        run_multiple_example()

    if example in ['polynomial', 'all']:
        console.print(Panel(
            "[bold cyan]V√≠ d·ª• 3: H·ªìi quy ƒëa th·ª©c[/bold cyan]\n"
            "D·ª± ƒëo√°n gi√° nh√† v·ªõi c√°c m√¥ h√¨nh ƒëa th·ª©c kh√°c nhau",
            border_style="cyan"
        ))
        polynomial_main()
    
    if example in ['logistic', 'all']:
        console.print(Panel(
            "[bold cyan]V√≠ d·ª• 4: H·ªìi quy logistic[/bold cyan]\n"
            "Ph√¢n lo·∫°i h·ªçc sinh ƒë·ªó/tr∆∞·ª£t d·ª±a tr√™n ƒëi·ªÉm thi",
            border_style="cyan"
        ))
        run_logistic_example()

    if example in ['perceptron', 'all']:
        console.print(Panel(
            "[bold cyan]V√≠ d·ª• 5: Perceptron[/bold cyan]\n"
            "H·ªçc h√†m AND v·ªõi perceptron",
            border_style="cyan"
        ))
        train_perceptron()
    
    if example in ['neural', 'all']:
        console.print(Panel(
            "[bold cyan]V√≠ d·ª• 6: Neural Network[/bold cyan]\n"
            "H·ªçc h√†m XOR v·ªõi neural network m·ªôt l·ªõp ·∫©n",
            border_style="cyan"
        ))
        run_neural_network()
    
    if example in ['tf_neural', 'all']:
        console.print(Panel(
            "[bold cyan]V√≠ d·ª• 7: TensorFlow Neural Network[/bold cyan]\n"
            "H·ªçc h√†m AND v·ªõi neural network s·ª≠ d·ª•ng TensorFlow",
            border_style="cyan"
        ))
        run_tf_neural_network()
    
    print_generated_images()

if __name__ == "__main__":
    main() 