import os
import numpy as np
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import track
from rich.tree import Tree
from rich import print as rprint

# Import core functionality
from .core.vector import (
    add_vectors,
    dot_product,
    vector_norm,
    create_vectors,
    vector_operations,
    unit_vector_and_angle,
    vector_projection
)
from .core.cost_function import compute_cost, generate_house_data
from .core.gradient_descent import gradient_descent, compute_gradient

# Import visualization
from .visualization.cost_plot import (
    plot_cost_3d,
    plot_cost_contour,
    plot_linear_regression_fit
)
from .visualization.gradient_plot import plot_gradient_descent, plot_gradient_steps

# Initialize rich console
console = Console()

# Dictionary qu·∫£n l√Ω h√¨nh ·∫£nh
IMAGES = {
    "Linear Regression": {
        "linear_regression_fit.png": "K·∫øt qu·∫£ h·ªìi quy tuy·∫øn t√≠nh v·ªõi d·ªØ li·ªáu training v√† ƒë∆∞·ªùng h·ªìi quy"
    },
    "Cost Function": {
        "cost_function_3d.png": "B·ªÅ m·∫∑t cost function trong kh√¥ng gian 3D",
        "cost_function_contour.png": "ƒê∆∞·ªùng ƒë·ªìng m·ª©c c·ªßa cost function"
    },
    "Gradient Descent": {
        "gradient_descent_3d.png": "Qu√° tr√¨nh gradient descent tr√™n b·ªÅ m·∫∑t cost 3D",
        "gradient_descent_contour.png": "Qu√° tr√¨nh gradient descent tr√™n contour",
        "gradient_descent_steps.png": "C√°c b∆∞·ªõc c·ªßa gradient descent tr√™n d·ªØ li·ªáu",
        "cost_history.png": "L·ªãch s·ª≠ cost function qua c√°c iteration"
    }
}

def ensure_images_dir():
    """ƒê·∫£m b·∫£o th∆∞ m·ª•c images t·ªìn t·∫°i"""
    if not os.path.exists('images'):
        os.makedirs('images')

def print_generated_images():
    """In th√¥ng tin v·ªÅ c√°c h√¨nh ·∫£nh ƒë√£ t·∫°o"""
    tree = Tree("üìä H√¨nh ·∫£nh ƒë√£ t·∫°o")
    
    for category, images in IMAGES.items():
        category_tree = tree.add(f"üìÅ {category}")
        for img_name, description in images.items():
            img_path = os.path.join('images', img_name)
            if os.path.exists(img_path):
                size = os.path.getsize(img_path) / 1024  # Convert to KB
                category_tree.add(f"üìÑ {img_name} ({size:.1f}KB) - {description}")
            else:
                category_tree.add(f"‚ùå {img_name} (kh√¥ng t√¨m th·∫•y) - {description}")
    
    console.print("\n")
    console.print(Panel(tree, title="[bold blue]Th√¥ng tin h√¨nh ·∫£nh[/bold blue]"))
    console.print("\n")

def run_vector_examples():
    """Ch·∫°y c√°c v√≠ d·ª• v·ªÅ vector"""
    console.print("\n[bold cyan]Vector Operations Examples[/bold cyan]", justify="center")
    
    # Create sample vectors
    v1, v2 = create_vectors()
    
    # Perform vector operations
    operations = vector_operations(v1, v2)
    unit_angle = unit_vector_and_angle(v1, v2)
    projection = vector_projection(v1, v2)
    
    # Create table for results
    table = Table(title="Vector Operations Results")
    table.add_column("Operation", style="cyan")
    table.add_column("Result", style="green")
    
    table.add_row("Vector 1", str(v1))
    table.add_row("Vector 2", str(v2))
    table.add_row("Sum", str(operations['v_sum']))
    table.add_row("Difference", str(operations['v_diff']))
    table.add_row("Scaled (2*v1)", str(operations['v_scaled']))
    table.add_row("Norm of v1", f"{operations['v1_norm']:.2f}")
    table.add_row("Dot product", str(operations['dot_product']))
    table.add_row("Cross product", str(operations['cross_product']))
    table.add_row("Angle between vectors", f"{unit_angle['angle']:.2f}¬∞")
    table.add_row("Projection norm", f"{projection['projection_norm']:.2f}")
    
    console.print(table)

def run_linear_regression():
    """Ch·∫°y v√≠ d·ª• v·ªÅ linear regression s·ª≠ d·ª•ng gradient descent"""
    console.print("\n[bold cyan]Linear Regression Example[/bold cyan]", justify="center")
    
    # T·∫°o d·ªØ li·ªáu m·∫´u
    x = np.array([1, 2, 3, 4, 5])
    y = np.array([2, 4, 6, 8, 10])
    
    # Kh·ªüi t·∫°o tham s·ªë
    initial_w = 0
    initial_b = 0
    iterations = 1000
    alpha = 0.01
    
    # Th·ª±c hi·ªán gradient descent
    with console.status("[bold green]Running gradient descent..."):
        w_final, b_final, J_hist, p_hist = gradient_descent(
            x, y, initial_w, initial_b, alpha, iterations, compute_cost)
    
    panel = Panel(
        f"[green]Found parameters:[/green]\n"
        f"w = {w_final:.2f}\n"
        f"b = {b_final:.2f}\n"
        f"Equation: y = {w_final:.2f}x + {b_final:.2f}",
        title="Linear Regression Results",
        border_style="cyan"
    )
    console.print(panel)
    
    # Create and save visualization
    with console.status("[bold green]Generating visualization..."):
        plot_linear_regression_fit(x, y, w_final, b_final, save_as='linear_regression_fit.png')
        console.print("[green]‚úì[/green] Linear regression visualization saved")

def run_cost_calculation():
    """Ch·∫°y v√≠ d·ª• v·ªÅ cost calculation"""
    console.print("\n[bold cyan]Cost Function Visualization[/bold cyan]", justify="center")
    
    with console.status("[bold green]Generating cost function visualizations..."):
        x_train, y_train = generate_house_data()
        w, b = 200, 100
        cost = compute_cost(x_train, y_train, w, b)
        
        panel = Panel(
            f"[green]Cost function evaluation:[/green]\n"
            f"w = {w}\n"
            f"b = {b}\n"
            f"Cost = {cost:.2f}",
            title="Cost Function Results",
            border_style="cyan"
        )
        console.print(panel)
        
        plot_cost_3d(x_train, y_train, w_range=(100, 300), b_range=(-200, 200), save_as='cost_function_3d.png')
        plot_cost_contour(x_train, y_train, w_range=(100, 300), b_range=(-200, 200), save_as='cost_function_contour.png')
        
        console.print("[green]‚úì[/green] Cost function visualizations saved")

def run_gradient_descent():
    """Ch·∫°y v√≠ d·ª• v·ªÅ gradient descent"""
    console.print("\n[bold cyan]Gradient Descent Example[/bold cyan]", justify="center")
    
    x_train, y_train = generate_house_data()
    initial_w = 100
    initial_b = 0
    iterations = 1000
    alpha = 0.01
    
    console.print(Panel(
        f"[green]Initial parameters:[/green]\n"
        f"w = {initial_w}\n"
        f"b = {initial_b}\n"
        f"Learning rate (Œ±) = {alpha}\n"
        f"Iterations = {iterations}",
        title="Gradient Descent Setup",
        border_style="cyan"
    ))
    
    # Th·ª±c hi·ªán gradient descent
    with console.status("[bold green]Running gradient descent..."):
        w_final, b_final, J_hist, p_hist = gradient_descent(
            x_train, y_train, initial_w, initial_b, alpha, iterations, compute_cost)
    
    # T√°ch l·ªãch s·ª≠ tham s·ªë
    w_hist = [p[0] for p in p_hist]
    b_hist = [p[1] for p in p_hist]
    
    console.print(Panel(
        f"[green]Final results:[/green]\n"
        f"w = {w_final:.2f}\n"
        f"b = {b_final:.2f}\n"
        f"Final cost = {J_hist[-1]:.2f}",
        title="Gradient Descent Results",
        border_style="cyan"
    ))
    
    # V·∫Ω ƒë·ªì th·ªã
    with console.status("[bold green]Generating visualizations..."):
        plot_gradient_descent(x_train, y_train, w_hist, b_hist, J_hist, compute_cost, save_as='gradient_descent_3d.png')
        plot_gradient_steps(x_train, y_train, w_hist, b_hist, compute_cost, save_as='gradient_descent_steps.png')
        console.print("[green]‚úì[/green] Gradient descent visualizations saved")

def main():
    """H√†m main ch·∫°y t·∫•t c·∫£ c√°c v√≠ d·ª•"""
    console.print(Panel.fit(
        "[bold blue]·ª®ng D·ª•ng Gi·∫£i T√≠ch v√† H·ªçc M√°y[/bold blue]\n"
        "[italic]Minh h·ªça c√°c kh√°i ni·ªám c∆° b·∫£n trong h·ªçc m√°y[/italic]",
        border_style="blue"
    ))
    
    # Ensure images directory exists
    ensure_images_dir()
    
    # Ch·∫°y c√°c v√≠ d·ª•
    for example in track([
        run_vector_examples,
        run_linear_regression,
        run_cost_calculation,
        run_gradient_descent
    ], description="Running examples..."):
        example()
    
    # In th√¥ng tin v·ªÅ c√°c h√¨nh ·∫£nh ƒë√£ t·∫°o
    print_generated_images()

if __name__ == "__main__":
    main() 