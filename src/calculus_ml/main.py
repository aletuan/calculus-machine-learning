"""
Main script to run all examples.
"""

import os
import numpy as np
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import track
from rich.tree import Tree
from rich import print as rprint
import click

# Import core functionality
from .core.linear.regression import LinearRegression
from .core.logistic.regression import LogisticRegression

# Import examples
from .examples.linear_regression.single_linear_example import run_linear_example
from .examples.linear_regression.multiple_linear_example import run_multiple_example
from .examples.logistic_example import run_logistic_example
from .examples.polynomial_example import main as polynomial_main
from .examples.perceptron.train import train_perceptron
from .examples.single_hidden_layer.train import main as run_neural_network
from .examples.tf_one_hidden_layer.train import main as run_tf_neural_network

# Initialize rich console
console = Console()

# Dictionary qu·∫£n l√Ω h√¨nh ·∫£nh
IMAGES = {
    "Linear Regression": {
        "linear_regression_fit.png": "ƒê∆∞·ªùng h·ªìi quy tuy·∫øn t√≠nh v√† d·ªØ li·ªáu",
        "linear_cost_history.png": "L·ªãch s·ª≠ cost function c·ªßa linear regression",
        "multiple_regression_fit.png": "M·∫∑t ph·∫≥ng h·ªìi quy nhi·ªÅu bi·∫øn v√† d·ªØ li·ªáu",
        "multiple_cost_history.png": "L·ªãch s·ª≠ cost function c·ªßa h·ªìi quy nhi·ªÅu bi·∫øn",
        "gradient_descent_example.png": "Minh h·ªça qu√° tr√¨nh gradient descent"
    },
    "Polynomial Regression": {
        "polynomial_regression_fit.png": "So s√°nh c√°c m√¥ h√¨nh polynomial kh√°c b·∫≠c",
        "regularization_effect.png": "·∫¢nh h∆∞·ªüng c·ªßa regularization"
    },
    "Logistic Regression": {
        "logistic_decision_boundary.png": "Decision boundary c·ªßa logistic regression",
        "logistic_cost_history.png": "L·ªãch s·ª≠ cost function c·ªßa logistic regression"
    },
    "Perceptron": {
        "perceptron_training_history.png": "L·ªãch s·ª≠ training c·ªßa perceptron"
    },
    "Neural Network": {
        "neural_network_training_history.png": "L·ªãch s·ª≠ training c·ªßa neural network"
    },
    "TensorFlow Neural Network": {
        "tf_and_training.png": "L·ªãch s·ª≠ training c·ªßa TensorFlow neural network"
    },
    "Decision Tree": {
        "decision_tree_boundary.png": "Decision boundary c·ªßa Decision Tree"
    }
}

def ensure_images_dir():
    """ƒê·∫£m b·∫£o th∆∞ m·ª•c images t·ªìn t·∫°i"""
    if not os.path.exists('images'):
        os.makedirs('images')

def print_generated_images():
    """In th√¥ng tin v·ªÅ c√°c h√¨nh ·∫£nh ƒë√£ t·∫°o"""
    tree = Tree("üìä H√¨nh ·∫£nh ƒë√£ t·∫°o")
    
    for category, images in IMAGES.items():
        category_tree = tree.add(f"üìÅ {category}")
        for img_name, description in images.items():
            img_path = os.path.join('images', img_name)
            if os.path.exists(img_path):
                size = os.path.getsize(img_path) / 1024  # Convert to KB
                category_tree.add(f"üìÑ {img_name} ({size:.1f}KB) - {description}")
            else:
                category_tree.add(f"‚ùå {img_name} (kh√¥ng t√¨m th·∫•y) - {description}")
    
    console.print("\n")
    console.print(Panel(tree, title="[bold blue]Th√¥ng tin h√¨nh ·∫£nh[/bold blue]"))
    console.print("\n")

def print_examples_table():
    """In b·∫£ng c√°c v√≠ d·ª• c√≥ s·∫µn"""
    table = Table(title="Machine Learning Examples")
    table.add_column("Example", style="cyan", justify="left")
    table.add_column("Description", style="green", justify="left")
    
    examples = [
        ("1. Linear Regression", 
         "D·ª± ƒëo√°n gi√° nh√† d·ª±a tr√™n di·ªán t√≠ch"),
        ("2. Multiple Linear Regression",
         "D·ª± ƒëo√°n gi√° nh√† d·ª±a tr√™n di·ªán t√≠ch v√† s·ªë ph√≤ng ng·ªß"),
        ("3. Polynomial Regression",
         "D·ª± ƒëo√°n gi√° nh√† v·ªõi c√°c m√¥ h√¨nh ƒëa th·ª©c"),
        ("4. Logistic Regression",
         "Ph√¢n lo·∫°i h·ªçc sinh ƒë·ªó/tr∆∞·ª£t d·ª±a tr√™n ƒëi·ªÉm thi"),
        ("5. Perceptron",
         "H·ªçc h√†m AND v·ªõi perceptron"),
        ("6. Neural Network",
         "H·ªçc h√†m XOR v·ªõi neural network m·ªôt l·ªõp ·∫©n"),
        ("7. TensorFlow Neural Network",
         "H·ªçc h√†m AND v·ªõi neural network s·ª≠ d·ª•ng TensorFlow"),
        ("8. Decision Tree",
         "Ph√¢n lo·∫°i hoa Iris s·ª≠ d·ª•ng Decision Tree")
    ]
    
    for example in examples:
        table.add_row(*example)
    
    console.print("\n")
    console.print(Panel(table, title="[bold blue]Available Examples[/bold blue]"))
    console.print("\n")

def get_user_choice():
    """L·∫•y l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng"""
    while True:
        try:
            console.print("\n[bold]Ch·ªçn v√≠ d·ª• ƒë·ªÉ ch·∫°y:[/bold]")
            console.print("1. Ch·∫°y t·∫•t c·∫£ c√°c v√≠ d·ª•")
            console.print("2. Ch·ªçn v√≠ d·ª• c·ª• th·ªÉ")
            choice = int(console.input("\n[bold]Nh·∫≠p l·ª±a ch·ªçn (1-2): [/bold]"))
            if choice in [1, 2]:
                break
            console.print("[red]Vui l√≤ng nh·∫≠p 1 ho·∫∑c 2[/red]")
        except ValueError:
            console.print("[red]Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá[/red]")
    
    if choice == 1:
        return 'all'
    
    while True:
        try:
            console.print("\n[bold]Ch·ªçn v√≠ d·ª• c·ª• th·ªÉ:[/bold]")
            console.print("1. Linear Regression")
            console.print("2. Multiple Linear Regression")
            console.print("3. Polynomial Regression")
            console.print("4. Logistic Regression")
            console.print("5. Perceptron")
            console.print("6. Neural Network")
            console.print("7. TensorFlow Neural Network")
            console.print("8. Decision Tree")
            example_choice = int(console.input("\n[bold]Nh·∫≠p s·ªë v√≠ d·ª• (1-8): [/bold]"))
            if 1 <= example_choice <= 8:
                break
            console.print("[red]Vui l√≤ng nh·∫≠p s·ªë t·ª´ 1 ƒë·∫øn 8[/red]")
        except ValueError:
            console.print("[red]Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá[/red]")
    
    example_map = {
        1: 'linear',
        2: 'multiple',
        3: 'polynomial',
        4: 'logistic',
        5: 'perceptron',
        6: 'neural',
        7: 'tf_neural',
        8: 'decision_tree'
    }
    return example_map[example_choice]

def run_example(example):
    """Ch·∫°y v√≠ d·ª• ƒë∆∞·ª£c ch·ªçn"""
    if example in ['linear', 'all']:
        console.print(Panel(
            "[bold cyan]V√≠ d·ª• 1: H·ªìi quy tuy·∫øn t√≠nh ƒë∆°n gi·∫£n[/bold cyan]\n"
            "D·ª± ƒëo√°n gi√° nh√† d·ª±a tr√™n di·ªán t√≠ch",
            border_style="cyan"
        ))
        run_linear_example()
    
    if example in ['multiple', 'all']:
        console.print(Panel(
            "[bold cyan]V√≠ d·ª• 2: H·ªìi quy tuy·∫øn t√≠nh nhi·ªÅu bi·∫øn[/bold cyan]\n"
            "D·ª± ƒëo√°n gi√° nh√† d·ª±a tr√™n di·ªán t√≠ch v√† s·ªë ph√≤ng ng·ªß",
            border_style="cyan"
        ))
        run_multiple_example()

    if example in ['polynomial', 'all']:
        console.print(Panel(
            "[bold cyan]V√≠ d·ª• 3: H·ªìi quy ƒëa th·ª©c[/bold cyan]\n"
            "D·ª± ƒëo√°n gi√° nh√† v·ªõi c√°c m√¥ h√¨nh ƒëa th·ª©c kh√°c nhau",
            border_style="cyan"
        ))
        polynomial_main()
    
    if example in ['logistic', 'all']:
        console.print(Panel(
            "[bold cyan]V√≠ d·ª• 4: H·ªìi quy logistic[/bold cyan]\n"
            "Ph√¢n lo·∫°i h·ªçc sinh ƒë·ªó/tr∆∞·ª£t d·ª±a tr√™n ƒëi·ªÉm thi",
            border_style="cyan"
        ))
        run_logistic_example()

    if example in ['perceptron', 'all']:
        console.print(Panel(
            "[bold cyan]V√≠ d·ª• 5: Perceptron[/bold cyan]\n"
            "H·ªçc h√†m AND v·ªõi perceptron",
            border_style="cyan"
        ))
        train_perceptron()
    
    if example in ['neural', 'all']:
        console.print(Panel(
            "[bold cyan]V√≠ d·ª• 6: Neural Network[/bold cyan]\n"
            "H·ªçc h√†m XOR v·ªõi neural network m·ªôt l·ªõp ·∫©n",
            border_style="cyan"
        ))
        run_neural_network()
    
    if example in ['tf_neural', 'all']:
        console.print(Panel(
            "[bold cyan]V√≠ d·ª• 7: TensorFlow Neural Network[/bold cyan]\n"
            "H·ªçc h√†m AND v·ªõi neural network s·ª≠ d·ª•ng TensorFlow",
            border_style="cyan"
        ))
        run_tf_neural_network()

    if example in ['decision_tree', 'all']:
        console.print(Panel(
            "[bold cyan]V√≠ d·ª• 8: Decision Tree[/bold cyan]\n"
            "Ph√¢n lo·∫°i hoa Iris s·ª≠ d·ª•ng Decision Tree",
            border_style="cyan"
        ))
        from .examples.decision_tree.example import run_decision_tree_example
        run_decision_tree_example()

@click.command()
@click.option('--example', type=click.Choice([
    'linear', 'multiple', 'polynomial', 'logistic', 
    'perceptron', 'neural', 'tf_neural', 'decision_tree'
]), help='Ch·ªçn v√≠ d·ª• ƒë·ªÉ ch·∫°y')
def main(example):
    """Ch·∫°y c√°c v√≠ d·ª• v·ªÅ machine learning"""
    ensure_images_dir()
    print_examples_table()
    
    # N·∫øu kh√¥ng c√≥ l·ª±a ch·ªçn t·ª´ command line, h·ªèi ng∆∞·ªùi d√πng
    if example is None:
        example = get_user_choice()
    
    run_example(example)
    print_generated_images()

    if example == 'decision_tree':
        console.print("\n[bold green]Decision Tree Example[/bold green]")
        console.print("Ph√¢n lo·∫°i hoa Iris s·ª≠ d·ª•ng Decision Tree")
        console.print("Thu·∫≠t to√°n x√¢y d·ª±ng c√¢y d·ª±a tr√™n:")
        console.print("1. Information Gain")
        console.print("2. Entropy")
        console.print("\nC√¥ng th·ª©c:")
        console.print("- Entropy: H(S) = -Œ£ p(x) * log2(p(x))")
        console.print("- Information Gain: IG(S,A) = H(S) - Œ£ |Sv|/|S| * H(Sv)")
        
        print_images(['decision_tree_boundary.png'])

def print_images(image_names):
    """In th√¥ng tin v·ªÅ c√°c h√¨nh ·∫£nh ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh"""
    for img_name in image_names:
        img_path = os.path.join('images', img_name)
        if os.path.exists(img_path):
            size = os.path.getsize(img_path) / 1024  # Convert to KB
            console.print(f"üìÑ {img_name} ({size:.1f}KB)")
        else:
            console.print(f"‚ùå {img_name} (kh√¥ng t√¨m th·∫•y)")

if __name__ == "__main__":
    main() 